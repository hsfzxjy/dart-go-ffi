// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class LibTestBasic {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibTestBasic(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibTestBasic.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void InitTestContext(
    int cdcb,
    int portKey,
    bool isDefault,
  ) {
    return _InitTestContext(
      cdcb,
      portKey,
      isDefault,
    );
  }

  late final _InitTestContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Uint32, ffi.Int64, ffi.Bool)>>('InitTestContext');
  late final _InitTestContext =
      _InitTestContextPtr.asFunction<void Function(int, int, bool)>();

  int TestSingle(
    int cdcb,
  ) {
    return _TestSingle(
      cdcb,
    );
  }

  late final _TestSinglePtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestSingle');
  late final _TestSingle = _TestSinglePtr.asFunction<int Function(int)>();

  int TestTuple(
    int cdcb,
  ) {
    return _TestTuple(
      cdcb,
    );
  }

  late final _TestTuplePtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestTuple');
  late final _TestTuple = _TestTuplePtr.asFunction<int Function(int)>();

  int TestDartPop(
    int cdcb,
  ) {
    return _TestDartPop(
      cdcb,
    );
  }

  late final _TestDartPopPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestDartPop');
  late final _TestDartPop = _TestDartPopPtr.asFunction<int Function(int)>();

  int TestDartPackArray(
    int cdcb,
  ) {
    return _TestDartPackArray(
      cdcb,
    );
  }

  late final _TestDartPackArrayPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>(
          'TestDartPackArray');
  late final _TestDartPackArray =
      _TestDartPackArrayPtr.asFunction<int Function(int)>();

  int TestDartWithContext(
    int cdcb,
  ) {
    return _TestDartWithContext(
      cdcb,
    );
  }

  late final _TestDartWithContextPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>(
          'TestDartWithContext');
  late final _TestDartWithContext =
      _TestDartWithContextPtr.asFunction<int Function(int)>();

  int TestDartFast(
    int cdcb,
  ) {
    return _TestDartFast(
      cdcb,
    );
  }

  late final _TestDartFastPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestDartFast');
  late final _TestDartFast = _TestDartFastPtr.asFunction<int Function(int)>();

  int TestDartFastVoid(
    int cdcb,
  ) {
    return _TestDartFastVoid(
      cdcb,
    );
  }

  late final _TestDartFastVoidPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>(
          'TestDartFastVoid');
  late final _TestDartFastVoid =
      _TestDartFastVoidPtr.asFunction<int Function(int)>();

  int TestDartFallible(
    int cdcb,
  ) {
    return _TestDartFallible(
      cdcb,
    );
  }

  late final _TestDartFalliblePtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>(
          'TestDartFallible');
  late final _TestDartFallible =
      _TestDartFalliblePtr.asFunction<int Function(int)>();

  int TestDartFutureResolve(
    int cdcb,
  ) {
    return _TestDartFutureResolve(
      cdcb,
    );
  }

  late final _TestDartFutureResolvePtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>(
          'TestDartFutureResolve');
  late final _TestDartFutureResolve =
      _TestDartFutureResolvePtr.asFunction<int Function(int)>();

  int TestDartFutureReject(
    int cdcb,
  ) {
    return _TestDartFutureReject(
      cdcb,
    );
  }

  late final _TestDartFutureRejectPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>(
          'TestDartFutureReject');
  late final _TestDartFutureReject =
      _TestDartFutureRejectPtr.asFunction<int Function(int)>();

  int TestDartStream(
    int cdcb,
  ) {
    return _TestDartStream(
      cdcb,
    );
  }

  late final _TestDartStreamPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestDartStream');
  late final _TestDartStream =
      _TestDartStreamPtr.asFunction<int Function(int)>();

  int TestGoPop(
    int cdcb,
  ) {
    return _TestGoPop(
      cdcb,
    );
  }

  late final _TestGoPopPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestGoPop');
  late final _TestGoPop = _TestGoPopPtr.asFunction<int Function(int)>();

  int TestGoWithContext(
    int cdcb,
  ) {
    return _TestGoWithContext(
      cdcb,
    );
  }

  late final _TestGoWithContextPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>(
          'TestGoWithContext');
  late final _TestGoWithContext =
      _TestGoWithContextPtr.asFunction<int Function(int)>();

  int TestGoPackArray(
    int cdcb,
  ) {
    return _TestGoPackArray(
      cdcb,
    );
  }

  late final _TestGoPackArrayPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>(
          'TestGoPackArray');
  late final _TestGoPackArray =
      _TestGoPackArrayPtr.asFunction<int Function(int)>();

  int TestGoFast(
    int cdcb,
  ) {
    return _TestGoFast(
      cdcb,
    );
  }

  late final _TestGoFastPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestGoFast');
  late final _TestGoFast = _TestGoFastPtr.asFunction<int Function(int)>();

  int TestGoFastVoid(
    int cdcb,
  ) {
    return _TestGoFastVoid(
      cdcb,
    );
  }

  late final _TestGoFastVoidPtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestGoFastVoid');
  late final _TestGoFastVoid =
      _TestGoFastVoidPtr.asFunction<int Function(int)>();

  int TestGoFallible(
    int cdcb,
  ) {
    return _TestGoFallible(
      cdcb,
    );
  }

  late final _TestGoFalliblePtr =
      _lookup<ffi.NativeFunction<GoInt Function(ffi.Uint32)>>('TestGoFallible');
  late final _TestGoFallible =
      _TestGoFalliblePtr.asFunction<int Function(int)>();

  void TestPortClosed(
    int key,
    int isDefault,
  ) {
    return _TestPortClosed(
      key,
      isDefault,
    );
  }

  late final _TestPortClosedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, GoUint8)>>(
          'TestPortClosed');
  late final _TestPortClosed =
      _TestPortClosedPtr.asFunction<void Function(int, int)>();
}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Long;

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef GoUint8 = ffi.UnsignedChar;
